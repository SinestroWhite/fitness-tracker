"use client";

import { useState, useEffect, useMemo } from "react";
import { Plus, Search, Edit, Trash2, Target, Eye } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/contexts/auth-context";
import { useRouter } from "next/navigation";
import {
  apiService,
  type NutritionPlan,
  type NutritionPlanListParams,
} from "@/lib/api";
import { NutritionPlanForm } from "@/components/nutrition-plans/nutrition-plan-form";
import { DashboardLayout } from "@/components/layout/dashboard-layout";
import { ProtectedRoute } from "@/components/auth/protected-route";

const goalLabels: Record<"lose" | "gain" | "maintain", string> = {
  lose: "–û—Ç—Å–ª–∞–±–≤–∞–Ω–µ",
  gain: "–ö–∞—á–≤–∞–Ω–µ –Ω–∞ —Ç–µ–≥–ª–æ",
  maintain: "–ü–æ–¥–¥—ä—Ä–∂–∞–Ω–µ",
};

const goalColors: Record<"lose" | "gain" | "maintain", string> = {
  lose: "bg-red-600 text-red-50",
  gain: "bg-green-600 text-green-50",
  maintain: "bg-blue-600 text-blue-50",
};

export default function NutritionPlansPage() {
  const { user } = useAuth();
  const { toast } = useToast();
  const router = useRouter();

  const [rawPlans, setRawPlans] = useState<NutritionPlan[]>([]);
  const [loading, setLoading] = useState(true);

  // üîç –î–µ–±–æ—É–Ω—Å–Ω–∞—Ç–æ —Ç—ä—Ä—Å–µ–Ω–µ (–∫–ª–∏–µ–Ω—Ç—Å–∫–æ)
  const [searchTerm, setSearchTerm] = useState("");
  const [debouncedSearch, setDebouncedSearch] = useState("");

  // üéØ –§–∏–ª—Ç—ä—Ä –ø–æ —Ü–µ–ª (–∫—ä–º –±–µ–∫–µ–Ω–¥–∞, –∞–∫–æ –µ –ø–æ–¥–¥—ä—Ä–∂–∞–Ω)
  const [goalFilter, setGoalFilter] = useState<string>("all");

  // –î–∏–∞–ª–æ–∑–∏
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [editingPlan, setEditingPlan] = useState<NutritionPlan | null>(null);
  const [deletePlanId, setDeletePlanId] = useState<string | null>(null);
  const [deleting, setDeleting] = useState(false);

  const canManage = user?.role === "trainer" || user?.role === "admin";

  // ‚è±Ô∏è Debounce
  useEffect(() => {
    const h = setTimeout(() => setDebouncedSearch(searchTerm.trim()), 300);
    return () => clearTimeout(h);
  }, [searchTerm]);

  // –§–µ—á –ø—Ä–∏ mount –∏ –ø—Ä–∏ —Å–º—è–Ω–∞ –Ω–∞ —Ü–µ–ª—Ç–∞
  useEffect(() => {
    fetchNutritionPlans();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [goalFilter]);

  const fetchNutritionPlans = async () => {
    try {
      setLoading(true);
      const params: NutritionPlanListParams = {
        pageSize: 1000,
        include: "author",
      };
      if (goalFilter !== "all") {
        params.goal = goalFilter as "lose" | "gain" | "maintain";
      }
      const response = await apiService.getNutritionPlans(params);
      setRawPlans(Array.isArray(response.data) ? response.data : []);
    } catch {
      toast({
        title: "–ì—Ä–µ—à–∫–∞",
        description: "–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏—Ç–µ –ø–ª–∞–Ω–æ–≤–µ",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleCreatePlan = async (data: any) => {
    try {
      await apiService.createNutritionPlan(data);
      toast({
        title: "–£—Å–ø–µ—Ö",
        description: "–•—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏—è—Ç –ø–ª–∞–Ω –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      });
      setShowCreateDialog(false);
      fetchNutritionPlans();
    } catch {
      toast({
        title: "–ì—Ä–µ—à–∫–∞",
        description: "–ù–µ—É—Å–ø–µ—à–Ω–æ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏—è –ø–ª–∞–Ω",
        variant: "destructive",
      });
    }
  };

  const handleUpdatePlan = async (data: any) => {
    if (!editingPlan) return;
    try {
      await apiService.updateNutritionPlan(editingPlan.id, data);
      toast({
        title: "–£—Å–ø–µ—Ö",
        description: "–•—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏—è—Ç –ø–ª–∞–Ω –µ –æ–±–Ω–æ–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      });
      setEditingPlan(null);
      fetchNutritionPlans();
    } catch {
      toast({
        title: "–ì—Ä–µ—à–∫–∞",
        description: "–ù–µ—É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏—è –ø–ª–∞–Ω",
        variant: "destructive",
      });
    }
  };

  const handleConfirmDelete = async () => {
    if (!deletePlanId) return;
    try {
      setDeleting(true);
      await apiService.deleteNutritionPlan(deletePlanId);
      toast({
        title: "–£—Å–ø–µ—Ö",
        description: "–•—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏—è—Ç –ø–ª–∞–Ω –µ –∏–∑—Ç—Ä–∏—Ç —É—Å–ø–µ—à–Ω–æ",
      });
      setDeletePlanId(null);
      fetchNutritionPlans();
    } catch {
      toast({
        title: "–ì—Ä–µ—à–∫–∞",
        description: "–ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏—è –ø–ª–∞–Ω",
        variant: "destructive",
      });
    } finally {
      setDeleting(false);
    }
  };

  const resetFilters = () => {
    setSearchTerm("");
    setGoalFilter("all");
  };

  // üß† –ö–ª–∏–µ–Ω—Ç—Å–∫–æ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ (—Ç—ä—Ä—Å–µ–Ω–µ + –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥—É–±–ª–∞–∂ –Ω–∞ —Ñ–∏–ª—Ç—ä—Ä–∞ –ø–æ —Ü–µ–ª)
  const filteredPlans = useMemo(() => {
    let list = rawPlans;
    if (goalFilter !== "all") {
      list = list.filter((p) => p.goal === goalFilter);
    }
    if (debouncedSearch) {
      const q = debouncedSearch.toLowerCase();
      list = list.filter(
        (p) =>
          p.title?.toLowerCase?.().includes(q) ||
          p.goal?.toLowerCase?.().includes(q) ||
          p.description?.toLowerCase?.().includes(q) ||
          (p as any)?.author?.name?.toLowerCase?.().includes(q)
      );
    }
    return list;
  }, [rawPlans, goalFilter, debouncedSearch]);

  return (
    <ProtectedRoute>
      <DashboardLayout>
        <div className="container mx-auto p-6 space-y-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl text-secondary font-bold">–•—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏ –ø–ª–∞–Ω–æ–≤–µ</h1>
              <p className="text-secondary">
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏ –ø–ª–∞–Ω–æ–≤–µ –∏ —Ö—Ä–∞–Ω–µ–Ω–µ
              </p>
            </div>
            {canManage && (
              <Dialog
                open={showCreateDialog}
                onOpenChange={setShowCreateDialog}
              >
                <DialogTrigger asChild>
                  <Button variant="white">
                    <Plus className="h-4 w-4 mr-2" />
                    –°—ä–∑–¥–∞–π –ø–ª–∞–Ω
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-2xl">
                  <DialogHeader>
                    <DialogTitle>–°—ä–∑–¥–∞–π –Ω–æ–≤ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–Ω –ø–ª–∞–Ω</DialogTitle>
                  </DialogHeader>
                  <NutritionPlanForm
                    key={showCreateDialog ? "create-open" : "create-closed"}
                    onSubmit={handleCreatePlan}
                  />
                </DialogContent>
              </Dialog>
            )}
          </div>

          {/* –¢—ä—Ä—Å–µ–Ω–µ –∏ —Ñ–∏–ª—Ç—ä—Ä –ø–æ —Ü–µ–ª */}
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-secondary" />
              <Input
                placeholder="–¢—ä—Ä—Å–∏ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏ –ø–ª–∞–Ω–æ–≤–µ..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 border-1 border-gray-500 text-secondary"
              />
            </div>
            <Select value={goalFilter} onValueChange={setGoalFilter}>
              <SelectTrigger className="w-full sm:w-48">
                <SelectValue placeholder="–§–∏–ª—Ç—Ä–∏—Ä–∞–π –ø–æ —Ü–µ–ª" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">–í—Å–∏—á–∫–∏ —Ü–µ–ª–∏</SelectItem>
                <SelectItem value="lose">–û—Ç—Å–ª–∞–±–≤–∞–Ω–µ</SelectItem>
                <SelectItem value="gain">–ö–∞—á–≤–∞–Ω–µ –Ω–∞ —Ç–µ–≥–ª–æ</SelectItem>
                <SelectItem value="maintain">–ü–æ–¥–¥—ä—Ä–∂–∞–Ω–µ</SelectItem>
              </SelectContent>
            </Select>
            {(searchTerm || goalFilter !== "all") && (
              <Button variant="outline" onClick={resetFilters}>
                –ò–∑—á–∏—Å—Ç–∏ —Ñ–∏–ª—Ç—Ä–∏
              </Button>
            )}
          </div>

          {/* –û–ø—Ü–∏–æ–Ω–∞–ª–Ω–æ: –±—Ä–æ—è—á */}
          {(debouncedSearch || goalFilter !== "all") && !loading && (
            <p className="text-sm text-secondary">
              –ù–∞–º–µ—Ä–µ–Ω–∏: {filteredPlans.length}
            </p>
          )}

          {/* Grid */}
          {loading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(6)].map((_, i) => (
                <Card key={i} className="animate-pulse">
                  <CardHeader className="pb-3">
                    <div className="h-4 bg-muted rounded w-2/3" />
                    <div className="h-3 bg-muted rounded w-1/2 mt-2" />
                  </CardHeader>
                  <CardContent>
                    <div className="h-4 bg-muted rounded w-full mb-2" />
                    <div className="h-4 bg-muted rounded w-5/6" />
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredPlans.map((plan) => (
                  <Card
                    key={plan.id}
                    className="relative group hover:shadow-lg transition-shadow"
                  >
                    {canManage && (
                      <div className="absolute top-2 right-2 flex gap-1 z-10">
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => setEditingPlan(plan)}
                          className="h-8 w-8 p-0"
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => setDeletePlanId(plan.id)}
                          className="h-8 w-8 p-0"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    )}

                    <CardHeader className="pb-3">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <CardTitle className="text-lg mb-2">
                            {plan.title}
                          </CardTitle>
                          <Badge
                            className={`border ${
                              goalColors[plan.goal as keyof typeof goalColors]
                            }`}
                          >
                            <Target className="h-3 w-3 mr-1" />
                            {goalLabels[plan.goal as keyof typeof goalLabels] ??
                              plan.goal}
                          </Badge>
                        </div>
                      </div>
                      {plan.description && (
                        <p className="text-sm text-secondary mt-2 line-clamp-2">
                          {plan.description}
                        </p>
                      )}
                    </CardHeader>

                    <CardContent>
                      <div className="flex gap-2">
                        <Button
                          variant="white"
                          size="sm"
                          className="flex-1"
                          onClick={() =>
                            router.push(`/nutrition-plans/${plan.id}`)
                          }
                        >
                          <Eye className="h-4 w-4 mr-1" />
                          –î–µ—Ç–∞–π–ª–∏
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>

              {!loading &&
                (rawPlans.length === 0 ? (
                  // –ù—è–º–∞ –Ω–∏–∫–∞–∫–≤–∏ –ø–ª–∞–Ω–æ–≤–µ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞
                  <div className="text-center py-12">
                    <p className="text-secondary">
                      –í—Å–µ –æ—â–µ –Ω—è–º–∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏ –ø–ª–∞–Ω–æ–≤–µ.
                    </p>
                    {canManage && (
                      <Button
                        className="mt-4"
                        onClick={() => setShowCreateDialog(true)}
                      >
                        <Plus className="h-4 w-4 mr-2" />
                        –°—ä–∑–¥–∞–π –ø—ä—Ä–≤–∏—è –ø–ª–∞–Ω
                      </Button>
                    )}
                  </div>
                ) : (
                  // –ò–º–∞ –ø–ª–∞–Ω–æ–≤–µ, –Ω–æ —Ç–µ–∫—É—â–∏—Ç–µ —Ñ–∏–ª—Ç—Ä–∏/—Ç—ä—Ä—Å–µ–Ω–µ –Ω–µ –Ω–∞–º–∏—Ä–∞—Ç –Ω–∏—â–æ
                  filteredPlans.length === 0 && (
                    <div className="text-center py-12">
                      <p className="text-secondary">
                        –ù—è–º–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞ —Ç–µ–∫—É—â–æ—Ç–æ —Ç—ä—Ä—Å–µ–Ω–µ.
                      </p>
                    </div>
                  )
                ))}
            </>
          )}

          {/* Edit Dialog */}
          <Dialog
            open={!!editingPlan}
            onOpenChange={(open) => {
              setEditingPlan(open ? editingPlan : null);
            }}
          >
            <DialogContent className="max-w-2xl">
              <DialogHeader>
                <DialogTitle>–†–µ–¥–∞–∫—Ç–∏—Ä–∞–π —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–Ω –ø–ª–∞–Ω</DialogTitle>
              </DialogHeader>
              {editingPlan && (
                <NutritionPlanForm
                  key={editingPlan.id} // ‚¨ÖÔ∏è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª–µ–Ω —Ä–µ–º–æ—É–Ω—Ç –ø—Ä–∏ —Å–º—è–Ω–∞
                  plan={editingPlan}
                  onSubmit={handleUpdatePlan}
                />
              )}
            </DialogContent>
          </Dialog>

          {/* Delete Confirmation */}
          <AlertDialog
            open={!!deletePlanId}
            onOpenChange={(open) => !open && setDeletePlanId(null)}
          >
            <AlertDialogContent
              onPointerDownCapture={(e) => e.stopPropagation()}
              onKeyDownCapture={(e) => {
                if ((e as React.KeyboardEvent).key === "Escape")
                  e.stopPropagation();
              }}
            >
              <AlertDialogHeader>
                <AlertDialogTitle>–ü–æ—Ç–≤—ä—Ä–¥–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ</AlertDialogTitle>
                <AlertDialogDescription>
                  –°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ç–æ–∑–∏ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–Ω –ø–ª–∞–Ω?
                  –¢–æ–≤–∞ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel onClick={() => setDeletePlanId(null)}>
                  –û—Ç–∫–∞–∑
                </AlertDialogCancel>
                <AlertDialogAction
                  className="bg-destructive text-secondary hover:bg-destructive/90"
                  onClick={handleConfirmDelete}
                  disabled={deleting}
                >
                  {deleting ? "–ò–∑—Ç—Ä–∏–≤–∞–Ω–µ..." : "–ò–∑—Ç—Ä–∏–π"}
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </div>
      </DashboardLayout>
    </ProtectedRoute>
  );
}
